assign(max_models, -1).
assign(domain_size, 2).

list(distinct).
    [Cafeteria, Weapons].
    %, Navigation, O2, Shields, Communications, Storage, Admin, Electrical, LowerEngine, UpperEngine, Security, Reactor, MedBay].
    [FixWiring, EmptyGarbage].
    %, DownloadData, AcceptDivertedPower, ClearAsteroids, ChartCourse, StabilizeSteering, CleanO2Filter, EmptyChute, FuelEngines, SwipeCard, UploadData, CalibrateDistributor, DivertPower, AlignEngineOutput, StartReactor, UnlockManifolds, InspectSample, SubmitScan].
end_of_list.

formulas(players_tasks).

    all x (player(x) -> crewmate(x) | impostor(x)).
    all x ((crewmate(x) -> -impostor(x)) & (impostor(x) -> -crewmate(x))).
    all x (location(x) -> task(x, y)).

    player(player0) & player(player1).
    player0 = 0 & player1 = 1.

    Cafeteria = 0 & Weapons = 1.
    FixWiring = 0 & EmptyGarbage = 1.

    location(Cafeteria) | location(Weapons). %| location(Navigation) | location(O2) | location(Shields) | location(Communications) |  location(Storage) | location (Admin) | location (Electrical) | location(LowerEngine) | location(UpperEngine) | location(Security) | location(Reactor) | location(MedBay).
    task(Cafeteria, FixWiring) & task(Cafeteria, EmptyGarbage).% & task(Cafeteria, DownloadData).
    task(Weapons, FixWiring) & -task(Weapons, EmptyGarbage).

    %task(Weapons, AcceptDivertedPower) & task(Weapons, ClearAsteroids) & task(Weapons, DownloadData).
    %task(Navigation, AcceptDivertedPower) & task(Navigation, ChartCourse) & task(Navigation, DownloadData) & task(Navigation, FixWiring) & task(Navigation, StabilizeSteering).
    %task(O2, CleanO2Filter) & task(O2, EmptyChute) & task(02, AcceptDivertedPower).
    %task(Shields, AcceptDivertedPower) & task(Shields, DownloadData).
    %task(Communications, AcceptDivertedPower) & task(Communications, DownloadData).
    %task(Storage, EmptyGarbage) & task(Storage, EmptyChute) & task(Storage, FixWiring) & task(Storage, FuelEngines).
    %task(Admin, FixWiring) & task(Admin, SwipeCard) & task(Admin, UploadData).
    %task(Electrical, CalibrateDistributor) & task(Electrical, DivertPower) & task(Electrical, DownloadData) & task(Electrical, FixWiring).
    %task(LowerEngine, AcceptDivertedPower) & task(LowerEngine, AlignEngineOutput) & task(LowerEngine, FuelEngines).
    %task(UpperEngine, AcceptDivertedPower) & task(UpperEngine, AlignEngineOutput) & task(UpperEngine, FuelEngines).
    %task(Security, AcceptDivertedPower) & tesk(Security, FixWiring).
    %task(Reactor, StartReactor) & task(Reactor, UnlockManifolds).
    %task(MedBay, InspectSample) & task(MedBay, SubmitScan).

    % crewmate x did Task at Location -- we specify in game what the task is with task(x, y), where x - Location and y - Task
    all x (crewmate(x) -> didTask(x, Location)).
    all x (impostor(x) -> didTask(x, Location) | -didTask(x, Location)).
    
    didTask(player0, Cafeteria) & -didTask(player0, Weapons) | -didTask(player0, Cafeteria) & didTask(player0, Weapons).
    didTask(player1, Cafeteria) & -didTask(player1, Weapons) | -didTask(player1, Cafeteria) & didTask(player1, Weapons).
    %didTask(player2, Cafeteria) & -didTask(player2, Weapons) | -didTask(player2, Cafeteria) & didTask(player2, Weapons).
    %---------------------------------------------------------------------------------------------------------------------------

    %impostor x kills crewmate y at location
    %all x all y (impostor(x) & crewmate(y) -> kill(x, y, Location)).
    %all x (impostor(x) -> (exists y (crewmate(y) & kill(x, y, Location)))).

    %---------------------------------------------------------------------------------------------------------------------------
    % player x seen at Location
    all x (player(x) -> seenAt(x, Location)). %-- chestie ce o zice jocul cand facem jocul efectiv
    
    % player x is dead at location
    %all x (player(x) -> deadAt(x, Location) | aliveAt(x, Location)).
    %all x ((deadAt(x, Location) -> -aliveAt(x, Location)) & (aliveAt(x, Location) -> -deadAt(x, Location))).

    (seenAt(player0, Cafeteria) & -seenAt(player0, Weapons)) | (-seenAt(player0, Cafeteria) & seenAt(player0, Weapons)).
    (seenAt(player1, Cafeteria) & -seenAt(player1, Weapons)) | (-seenAt(player1, Cafeteria) & seenAt(player1, Weapons)).
    % asta poate e o vrajeala de mere sa nu trebuiasca sa scrii mereu seenAt si nu seenAt la acelasi player (nu e testata)
    %seenAt(player0, Cafeteria) | seenAt(player0, Weapons).
    %seenAt(player0, Cafeteria) -> -seenAt(player0, Weapons).
    %seenAt(player0, Weapons) -> -seenAt(player0, Cafeteria).
    %seenAt(player1, Cafeteria) | seenAt(player1, Weapons).
    %seenAt(player1, Cafeteria) -> -seenAt(player1, Weapons).
    %seenAt(player1, Weapons) -> -seenAt(player1, Cafeteria).

    %all players must be alive at first
    %alive(player0) & alive(player1). - o scriem in game asta (maybe)

    %(aliveAt(player0, Cafeteria) & aliveAt(player0, Weapons)) | (deadAt(player0, Cafeteria) & deadAt(player0, Weapons)).
    %(aliveAt(player1, Cafeteria) & aliveAt(player1, Weapons)) | (deadAt(player1, Cafeteria) & deadAt(player1, Weapons)).

    %deadAt(player0, Cafeteria) | deadAt(player0, Weapons) -> crewmate(x).
    %deadAt(player1, Cafeteria) | deadAt(player1, Weapons) -> crewmate(x).

    % if there is a dead player in a room and a player is seen there, they are the impostor
    all x exists y ((deadAt(y, Location) & seenAt(x, Location)) -> impostor(x)).

    %---------------------------------------------------------------------------------------------------------------------------

    %impostor x vented at location
    %all x (crewmate(x) -> -vent(x, Location)).
    all x (player(x) -> vent(x, Location) | -vent(x, Location)).

    % (vent(player0, Cafeteria) & -vent(player0, Weapons)) | (-vent(player0, Cafeteria) & vent(player0, Weapons)).
    % (vent(player1, Cafeteria) & -vent(player1, Weapons)) | (-vent(player1, Cafeteria) & vent(player1, Weapons)).
    vent(player0, Cafeteria) | vent(player0, Weapons) | -vent(player0, Cafeteria) | -vent(player0, Weapons).
    vent(player1, Cafeteria) | vent(player1, Weapons) | -vent(player1, Cafeteria) | -vent(player1, Weapons).

    %aici in loc de seenVenting ar trebui seenAt, DA NU MERE GIZI!
    all x ((vent(x, Location) & seenVenting(x, Location)) -> impostor(x)).
    seenVenting(player0, Cafeteria) | seenVenting(player0, Weapons) | -seenVenting(player0, Cafeteria) | -seenVenting(player0, Weapons).
    seenVenting(player1, Cafeteria) | seenVenting(player1, Weapons) | -seenVenting(player1, Cafeteria) | -seenVenting(player1, Weapons).
    %---------------------------------------------------------------------------------------------------------------------------

    crewmate(x) -> message(x).
    impostor(x) -> -message(x) | message(x).

end_of_list.

formulas(atMostOneImpostor).
    -(impostor(x) & impostor(y) & x != y).
    impostor(x) & impostor(y) -> x = y.
    (exists x crewmate(x)) & (exists x impostor(x)).
end_of_list.

formulas(game).

    %Case 1: We try with messages of accusation - WORKS
    %message(player0) <-> impostor(player1).
    %message(player1) <-> (-impostor(player1) & -impostor(player0)).


    %Case 2: We try with tasks - WORKS
    %message(player0) <-> didTask(player0, EmptyGarbage) & task(Cafeteria, EmptyGarbage).
    %message(player1) <-> didTask(player1, FixWiring) & task(Cafeteria, FixWiring). 

    %Case 3: We try with a dead body at a certain location and if the imposor is or not there - WORKS (4 models - because we don't use message and idk who is f1)
    % deadAt(player0, Weapons).
    % deadAt(player0, Cafeteria).
    % -deadAt(player1, Weapons).
    % -deadAt(player1, Cafeteria). %asta e una -vedem de fixam, daca nu lasam in python sa fie facute
    % seenAt(player1, Weapons). % - zis de python
    % seenAt(player0, Weapons). % - zis de python

    % didTask(player1, Cafeteria) & task(Cafeteria, FixWiring). % scriem astea ca sa nu fie mai multe scenarii in care ba is task-uri facute, ba nu
    % didTask(player0, Weapons) & task(Weapons, FixWiring).

    %Case 4: We try with vents.
    didTask(player0, Cafeteria) & task(Cafeteria, FixWiring). % scriem astea ca sa nu fie mai multe scenarii in care ba is task-uri facute, ba nu
    didTask(player1, Weapons) & task(Weapons, FixWiring).

    -deadAt(player0, Weapons).
    -deadAt(player0, Cafeteria).
    -deadAt(player1, Weapons).
    -deadAt(player1, Cafeteria). %asta e una -vedem de fixam, daca nu lasam in python sa fie facute

    -seenVenting(player0, Cafeteria).
    -seenVenting(player0, Weapons).
    -seenVenting(player1, Cafeteria).
    seenVenting(player1, Weapons).
    -vent(player1, Cafeteria).
    vent(player1, Weapons).
    -vent(player0, Cafeteria).
    -vent(player0, Weapons).

end_of_list.